#summary Tutorial of basic features.
#labels Featured

<wiki:toc max_depth="3" />

In what follows it is assumed that the key bindings and the configuration are as suggested on the [http://code.google.com/p/ess-tracebug/ main page] and the `ess-traceback` and `ess-debug` modes are turned on.

== Sourcing Errors ==

Download the [http://ess-tracebug.googlecode.com/svn/trunk/test.R `test.R`] file from the repository.  It contains
one function, `lm_test`, with an erroneous "," at line 6.

Open `test.R`  and press M-c s (or just source it explicitly with `source("test.R")`), you should get an error
`unexpected ','`  with the reference to the error position highlighted:

<img src="http://ess-tracebug.googlecode.com/svn/trunk/img/tut1_comma_error.png" width=500 >

With M-] from test.R (`next-error`) or from iESS buffer (`next-error-no-select`) you can jump directly to the error
location and the error position will be highlighted for `next-error-highlight` or `next-error-no-select` seconds
correspondingly.  Mouse-click on the highlighted reference in the process buffer will also do the job.

The above navigation functionality is based on next-error and
next-error-no-select capabilities which you get in compilation, grep
and occur modes, and should be familiar to many of ESS users.


== Interactive Debugger ==

Correct the  ","  error in the test.R and place the break-point (M-c b) at
some arbitrary position.
Source the file with M-c s.

Download the [http://ess-tracebug.googlecode.com/svn/trunk/main.R `main.R`] file which contains the following code:
{{{
require(stats); require(graphics)
lm_test(Fertility ~ . , data = swiss)
}}}

Execute the above code interactively.

You should be brought to the break-point in the `test.R` file. Fringe must display a small triangle and the current
line must be highlighted: 

<img src="http://ess-tracebug.googlecode.com/svn/trunk/img/tut2_break_point.png" width = 500>

Immediately after entering the interactive debugging  start pressing n,n,n... to jump through you code. This is
the easy-key-mode in which n,q,c do what usually n,Q,c do in R buffer. Any other event
triggers the exit from easy-key-mode and it is passed down the emacs command loop.

At any time you can execute these commands with `M-c c`, `M-c n`, `M-c q`, which also place the debugger into "easy key mode". "Easy key mode" is entered automatically whenever the debugger starts.

== Breakpoints ==

Try placing multiple breakpoints in the buffer. Toggle their state (M-c t) and kill them (M-c k). These operations apply to the closest breakpoint to the cursor in the visible area of the buffer.

== Traceback Buffer ==

After an error occurred, press {{{[M-c `]}}} (back-tick) to open the `*ess-traceback*` buffer:

<img src="http://ess-tracebug.googlecode.com/svn/trunk/img/tut3_traceback.png" width=500>

It displays the complete call stack and the most recent error with the references to the source file positions highlighted.

With the suggested default configuration, `n` and `p` navigate through the call-stack source positions without selecting the source buffer. Press `RET` to go to the source or `q` to quit.

== Work-Flow ==

With a big projects I always want to jump quickly to the focal point of my
analysis. This is where I source all the project files and execute
short code. For us the working file is "main.R" from above.

When the debugger starts it stores the position of the cursor in the "main.R" in `ess-input-ring`. You can jump to
that point with M-c i. Repeatedly pressing i,i,i...  will navigate through the `ess-input-ring` of previous "input points". S-i
will bring you backwards through that ring.

When you execute M-c i the current position is  inserted into the
`ess-debug-ring`. Usually it is the place when you correct the error. So it's a focal
point in the source code. You can jump through the debug-ring with M-c d d d D D
d....